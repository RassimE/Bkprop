namespace Bkprop
{
	class TrainingSet1 : ITrainingSet
	{
		public int PatternWidth { get { return 5; } }
		public int PatternHeight { get { return 7; } }
		public int OutputNumber { get { return 10; } }

		public string[] OutputNames { get; } = { "Zero", "One", "Two", "Three", "Four", "Five",
								  "Six", "Seven", "Eight", "Nine" };

		public DataPattern[] Patterns { get; } = {
			/*
					new DataPattern(new int[]					//?
									{
										0,0,0,0,0,0,
										0,0,0,0,0,0,
										0,0,0,0,0,0,
										0,0,0,0,0,0,
										0,0,0,0,0,0,
										0,0,0,0,0,0,
										0,0,0,0,0,0,
										0,0,0,0,0,0 },
				new int[]{ 0,0,0,0,0,0,0,0,0,0,0,0 }),
	*/
			new DataPattern(new int[]					//0
								{
									0,1,1,1,0,
									1,0,0,0,1,
									1,0,0,0,1,
									1,0,0,0,1,
									1,0,0,0,1,
									1,0,0,0,1,
									0,1,1,1,0 },
			new int[] { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 }),

			new DataPattern(new int[]					//1
								{
									0,0,1,0,0,
									0,1,1,0,0,
									0,0,1,0,0,
									0,0,1,0,0,
									0,0,1,0,0,
									0,0,1,0,0,
									0,1,1,1,0 },
			new int[] { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 }),

			new DataPattern(new int[]					//2
								{
									0,1,1,1,0,
									1,0,0,0,1,
									0,0,0,0,1,
									0,0,0,1,0,
									0,0,1,0,0,
									0,1,0,0,0,
									1,1,1,1,1 },
			new int[] { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 }),

			new DataPattern(new int[]					//3
								{
									1,1,1,1,1,
									0,0,0,0,1,
									0,0,0,1,0,
									0,0,1,0,0,
									0,0,0,1,1,
									1,0,0,0,1,
									0,1,1,1,0 },
			new int[] { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 }),

			new DataPattern(new int[]					//4
								{
									0,0,0,1,0,
									0,0,1,1,0,
									0,1,0,1,0,
									1,0,0,1,0,
									1,1,1,1,1,
									0,0,0,1,0,
									0,0,0,1,0 },
			new int[] { 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 }),

			new DataPattern(new int[]					//5
								{
									1,1,1,1,1,
									1,0,0,0,0,
									1,1,1,1,0,
									0,0,0,0,1,
									0,0,0,0,1,
									1,0,0,0,1,
									0,1,1,1,0 },
			new int[] { 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 }),

			new DataPattern(new int[]					//6
								{
									0,0,1,1,0,
									0,1,0,0,0,
									1,0,0,0,0,
									1,1,1,1,0,
									1,0,0,0,1,
									1,0,0,0,1,
									0,1,1,1,0 },
			new int[] { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 }),

			new DataPattern(new int[]					//7
								{
									1,1,1,1,1,
									0,0,0,0,1,
									0,0,0,1,0,
									0,0,1,0,0,
									0,0,1,0,0,
									0,0,1,0,0,
									0,0,1,0,0 },
			new int[] { 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 }),

			new DataPattern(new int[]					//8
								{
									0,1,1,1,0,
									1,0,0,0,1,
									1,0,0,0,1,
									0,1,1,1,0,
									1,0,0,0,1,
									1,0,0,0,1,
									0,1,1,1,0 },
			new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 1, 0 }),

			new DataPattern(new int[]					//9
								{
									0,1,1,1,0,
									1,0,0,0,1,
									1,0,0,0,1,
									0,1,1,1,1,
									0,0,0,0,1,
									0,0,0,1,0,
									0,1,1,0,0 },
			new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 }),

			new DataPattern(new int[]					// 4
								{
									1,0,0,0,1,
									1,0,0,0,1,
									1,0,0,0,1,
									1,1,1,1,1,
									0,0,0,0,1,
									0,0,0,0,1,
									0,0,0,0,1 },
			new int[] { 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 }),

			new DataPattern(new int[]					// 5
								{
									1,1,1,1,1,
									1,0,0,0,0,
									1,0,0,0,0,
									1,1,1,1,0,
									0,0,0,0,1,
									1,0,0,0,1,
									0,1,1,1,0 },
			new int[] { 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 }),

			new DataPattern(new int[]					// 7
								{
									1,1,1,1,0,
									0,0,0,1,0,
									0,0,0,1,0,
									0,0,1,1,1,
									0,0,0,1,0,
									0,0,0,1,0,
									0,0,0,1,0 },
			new int[] { 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 }),

			new DataPattern(new int[]					// 3
								{
									0,1,1,1,0,
									1,0,0,0,1,
									0,0,0,1,1,
									0,0,1,0,0,
									0,0,0,1,1,
									1,0,0,0,1,
									0,1,1,1,0 },
			new int[] { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 }),

			new DataPattern(new int[]					// 2
								{
									1,1,1,1,1,
									0,0,0,0,1,
									0,0,0,1,0,
									0,0,1,0,0,
									0,1,0,0,0,
									1,0,0,0,0,
									1,1,1,1,1 },
			new int[] { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 }),

			new DataPattern(new int[]					// 4 abierto
								{
									1,0,0,1,0,
									1,0,0,1,0,
									1,0,0,1,0,
									1,1,1,1,1,
									0,0,0,1,0,
									0,0,0,1,0,
									0,0,0,1,0 },
			new int[] { 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 }),

			new DataPattern(new int[]						// 0
								{
									0,0,1,1,1,
									0,1,0,0,1,
									0,1,0,0,1,
									1,0,0,0,1,
									1,0,0,0,1,
									1,0,0,1,0,
									0,1,1,0,0 },
			new int[] { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 }),

			new DataPattern(new int[]						// 9
								{
									0,1,1,1,0,
									1,0,0,0,1,
									1,0,0,0,1,
									0,1,1,1,1,
									0,0,0,0,1,
									0,0,0,0,1,
									1,1,1,1,1 },
			new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 }),

			new DataPattern(new int[]						// 9
								{
									0,1,1,1,0,
									1,0,0,0,1,
									1,0,0,0,1,
									0,1,1,1,1,
									0,0,0,0,1,
									1,0,0,0,1,
									0,1,1,1,0 },
			new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 }),

			new DataPattern(new int[]					//8
								{
									0,1,1,1,0,
									1,0,0,0,1,
									1,0,0,0,1,
									1,1,1,1,1,
									1,0,0,0,1,
									1,0,0,0,1,
									0,1,1,1,0 },
			new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 1, 0 }),

			new DataPattern(new int[]					//3
	                            {
									0,1,1,1,0,
									1,0,0,0,1,
									0,0,0,0,1,
									0,0,1,1,0,
									0,0,0,0,1,
									1,0,0,0,1,
									0,1,1,1,0 },
			new int[] { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 }),
		};
	}
}
